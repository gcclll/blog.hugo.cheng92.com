:PROPERTIES:
:ID:       d0fc0f76-8429-429c-99a0-206792da22ad
:END:
#+SETUPFILE:~/.gclrc/org/hugo_setup.org
#+HUGO_SLUG: build_your_own_runtime_core
#+HTML_HEAD: <meta name="category" content="vue"/>
#+HTML_HEAD: <meta name="tags" content="runtime-core"/>
#+HTML_HEAD: <meta name="createdAt" content="2022-05-09 09:40:04"/>
#+PROPERTY: header-args :noweb no-export
#+TITLE: build your own vue runtime-core
<badge: GCCLL | Homepage | green | / | gnu-emacs | tinder>

#+begin_box Vue3 runtime-core :background-color green

旧博客中的相关文章：

[[https://www.cheng92.com/vue/vue-mind-map-runtime-core-1/][Vue3 源码头脑风暴之 7 ☞ runtime-core(1) - 若叶知秋]]

[[https://www.cheng92.com/vue/vue-mind-map-runtime-core-2-render/][Vue3 源码头脑风暴之 7 ☞ runtime-core(2) - render - 若叶知秋]]

red:测试代码涉及到非runtime-core的会直接使用 [[https://github.com/vuejs/core/tree/main/packages][core/packages at main · vuejs/core]] red:现成的代码去测试

[[https://github.com/vuejs/core/tree/main/packages/runtime-core][core/packages/runtime-core at main · vuejs/core]]  应该说是最核心的一个模块了，以
h 函数为入口涵盖了组件完整生命周期的处理，从 vnode -> dom, mount -> update ->
unmount 的实现原理。
#+end_box
#+html: <br>

#+html: <br>
#+begin_details GlobalVars :title-color green
#+name: vue-pkgs
#+begin_src js -n -r
const compilerSFC = require(process.env.NODE_LIB + "/@vue/compiler-sfc")
const {
  isArray,
  isFunction,
  isString,
  isObject,
  EMPTY_ARR,
  extend,
  PatchFlags,
  ShapeFlags,
  SlotFlags,
  isOn,
  toDisplayString,
  camelize,
  capitalize,
  toHandlerKey,
  normalizeProps,
  normalizeClass,
  normalizeStyle,
  isNoUnitNumericStyleProp
} = require(process.env.NODE_LIB + "/@vue/shared")

const {
  isProxy, Ref, toRaw, isRef
} = require(process.env.NODE_LIB + "/@vue/reactivity")

const InternalObjectKey = `__vInternal`
const ShapeFlags = {
  ELEMENT: 1,
  FUNCTIONAL_COMPONENT: 1 << 1,
  STATEFUL_COMPONENT: 1 << 2,
  TEXT_CHILDREN: 1 << 3,
  ARRAY_CHILDREN: 1 << 4,
  SLOTS_CHILDREN: 1 << 5,
  TELEPORT: 1 << 6,
  SUSPENSE: 1 << 7,
  COMPONENT_SHOULD_KEEP_ALIVE: 1 << 8,
  COMPONENT_KEPT_ALIVE: 1 << 9,
  COMPONENT: ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT
}
#+end_src
#+end_details

* 简介

green:runtime-core的核心入口函数即h也就是createVNode函数，所以会以这个为切入点。

#+begin_export html
<a href="../assets/img/vue3/runtime-core/vue-runtime-core.svg"
data-fancybox="gallery"
data-caption="Preview"
><img src="../assets/img/vue3/runtime-core/vue-runtime-core.svg"/></a>
#+end_export
#+html: <br>

#+html: <br>
#+begin_details 本文中涉及的一些关键点记录 :title-color red
- class 支持数组(~['foo', 'bar']~)，对象(~{foo:true,bar:false}~)，字符串(~'foo bar'~)

- style 支持数组(~['color:red', {foo:'foo'}]~)，对象(~{color:'red',foo:'foo'}~)，字符串(~'color:red'~)

- class component 条件：

  1. 必须是 function 类型，其实 class 只不是个语法糖，实际它也是个函数类型。

  2. 含 ~__vccOpts = { template: '<div />'}~

- [[test-vnode-ref][vnode ref 属性合并处理逻辑？]]

- [[test-vnode-key][vnode key 属性简单的值覆盖操作？]]

- [[api-h][h()]] 和 [[api-createVNode][createVNode()]] 函数多种使用方式组合？

  ~h(type, propsOrChildren, ...children)~, 参数个数多变，对于这个函数的使用方法 记
  忆只要记住一点：

  #+begin_box
  props 总是对象，children 可以是对象(必须是 VNode 类型 __v_isVNode)也可以是 数
  组，所以：

  argc = 2, 如果是数组就一定是 children

  argc = 2, 如果是对象且有 __v_isVNode 标识，一定是 children 否则是 props

  argc = 3, 按照 h(type, props, children) 处理

  argc > 3, 按照 h(type, props, ...children) 处理，从第三个开始都是 children

  ~createVNode(type, props, children)~, 固定三个参数，第二个一定是 props, 第三 个
  一定是数组类型的 children，因为它后面还有更多的其他参数(patchFlag,
  dynamicProps, isBlockNode)，所以前三个必须确定下来。
  #+end_box

- [[id:4a858df2-f6f8-4d2f-9cda-78c12cbf42b3][scheduler, vue-next 中的任务调度器如何实现?]]

- [[api-watch][api watch(source, cb, option)]] 中的 source 只能是 reactive/ref/function/array
  类型， 如果是数组时其元素只能是 reactive/ref/function

- [[api-watch-deep][api watch(…, { deep: true }) 是如何做到深度监听的?]]

- [[api-watch-shallow-ref][api watch(shallowRef, cb (newVal) => {})]] 是如何直接使用 ~newVal.a~ 的？

  #+begin_src js
var obj = shallowRef({ a: 0 });
watch(shallowRef, (newVal) => {
  dummy = newVal.a; // 这里为什么可以直接访问 obj.a，obj 又是什么？
});
  #+end_src

- [[api-provide-inject][provide & inject 如何实现]]？

  实际上就是一个应用级别的全局变量，然后通过原型链继承的方式实现传递。

  ~provide(key,value)~ 向组件 ~provides[key] = value~ 设置

  ~inject(key)~ 从组件 ~provides[key]~ 取值

- setup() 返回值用来做了啥？

  如果是函数会被当做是该组件的 render 函数，可在使用 jsx 或 api 方式定义组件的时
  候使用。

  如果是一个对象则会被合并到 data 上去,所以如果使用了 setup() 可以考虑省略掉
  vue2 的 options api 写法。

- 组件声明周期函数(onBeforeXxx, onXxx)触发顺序是什么？
#+end_details

在开始之前，先来看看 ~createApp()~ 做了什么，首先看一下 vue3 是如何启动项目的。

#+begin_src js
createApp(<App/>).use(ElementPlus).mount('#app')
#+end_src

因此首先应该是 ~createApp(<App/>)~ 然后才是 mount，这个两个关键节点的实现也都在
runtime-core 这个包里面，所以这里就按照这个开发流程一步步往下解析(注： 至于
~<App/>~ 就不讲了，这个其实就是一个 root render 函数，与 [[id:5eff117f-92ba-490a-ba9c-e5f59e0cbe47][build your own vue
compiler-core]] 有关)。

下面是一个大致的流程图，供参考。

#+begin_export html
<a href="../assets/img/vue3/runtime-core/runtime-core-brief-structure.svg"
data-fancybox="gallery"
data-caption="Preview"
><img src="../assets/img/vue3/runtime-core/runtime-core-brief-structure.svg"/></a>
#+end_export

如上图， app 提供了几个能力：

1. ~app.config~ 配置应用的能力

   - ~app.config.globalProperties~ 注册全局对象
   - ~app.config.compilerOptions~ 提供额外的编译选项

2. ~app.use(Plugin)~ 注册插件，如： ~use(router)~, ~use(ElementPlus)~, ~use(vuex)~ 等等
3. ~app.component(name, MyComponent)~ 注册全局组件到 ~context.components[]~ ，这里注册的组件可以直接在任意子组
   件中直接使用 ~<my-component/>~ 而不需要引入。
4. ~app.mixin()~ 这个是为了兼容 vue2.x 的 options api。
5. ~app.directive(name, { beforeMount, mounted, ... })~ 注册全局指令(~context.directives[]~)使用的。
6. ~app.mount(Container)~
7. ~app.provide(key, value)~ 注入 root 级别的共享变量，子组件中可以通过
   ~inject(key)~ 拿到这些变量，实现就是基于原型链。

* mount()

createVNode 构建完整的 vnode 树，再 render 到 DOM 。

#+begin_src typescript -n -r
export function createAppAPI<HostElement>(
  render: RootRenderFunction,
  hydrate?: RootHydrateFunction
): CreateAppFunction<HostElement> {
  return function createApp(rootComponent, rootProps = null) {

    // ...

    const app: App = (context.app = {
      mount(
        rootContainer: HostElement,
        isHydrate?: boolean,
        isSVG?: boolean
      ): any {
        if (!isMounted) {
          const vnode = createVNode(
            rootComponent as ConcreteComponent,
            rootProps
          )
          // store app context on the root VNode.
          // this will be set on the root instance on initial mount.
          vnode.appContext = context

          // ...

          if (isHydrate && hydrate) {
            hydrate(vnode as VNode<Node, Element>, rootContainer as any)
          } else {
            render(vnode, rootContainer, isSVG)
          }

          // ...
          return getExposeProxy(vnode.component!) || vnode.component!.proxy
        }
      },
    })

    return app
  }
}
#+end_src

* createVNode()

rootProps 是在 ~createApp(Root, props)~ 的第二个参数传过来的对象做为 root 组件的 props。

#+name: createVNode
#+begin_src js -n -r
function isVNode(value) {
  return value ? value.__v_isVNode === true : false
}

function createVNode(
  type,
  props,
  children = null,
  patchFlag = 0,
  dynamicProps = null,
  isBlockNode = false
) {
  if (isVNode(type)) {
    const cloned = cloneVNode(type, props)
    if (children) {
      normalizeChildren(cloned, children)
    }
    return cloned
  }

  // class 和 style 处理
  if (props) {
    // TODO
  }

  const shapeFlag = isString(type)
    ? ShapeFlags.ELEMENT
    : isSuspense(type)
    ? ShapeFlags.SUSPENSE
    : isTeleport(type)
    ? ShapeFlags.TELEPORT
    : isObject(type)
    ? ShapeFlags.STATEFUL_COMPONENT
    : isFunction(type)
    ? ShapeFlags.FUNCTIONAL_COMPONENT
    : 0


  return createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  )
}
#+end_src

** cloneVNode()

克隆过程中处理了 key 和 ref 属性：

1. [[mergeProps][mergeProps(props, extraProps)]] 这个里面处理了 class 和 style

   - [[normalizeClass][normalizeClass()]]
   - [[normalizeStyle][normalizeStyle()]]

2. [[normalizeKey][normalizeKey(mergedProps)]], 处理 prop key
3. [[normalizeRef][normalizeRef(extraProps)]], 处理 prop ref

#+name: cloneVNode
#+begin_src js -n -r
function cloneVNode(vnode, extraProps, mergeRef = false) {
  // This is intentionally NOT using spread or extend to avoid the runtime
  // key enumeration cost.
  const { props, ref, patchFlag, children } = vnode
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref:
      extraProps && extraProps.ref
        ? // #2078 in the case of <component :is="vnode" ref="extra"/>
          // if the vnode itself already has a ref, cloneVNode will need to merge
          // the refs so the single vnode can be set on multiple refs
          mergeRef && ref
          ? isArray(ref)
            ? ref.concat(normalizeRef(extraProps)!)
            : [ref, normalizeRef(extraProps)]
          : normalizeRef(extraProps)
        : ref,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag:
      extraProps && vnode.type !== Fragment
        ? patchFlag === -1 // hoisted node
          ? PatchFlags.FULL_PROPS
          : patchFlag | PatchFlags.FULL_PROPS
        : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,

    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  }

  return cloned
}


#+end_src
** normalizeChildren()

#+begin_src js -n -r
function normalizeChildren(vnode, children) {
  let type = 0
  const { shapeFlag } = vnode
  if (children == null) {
    children = null
  } else if (isArray(children)) {
    type = ShapeFlags.ARRAY_CHILDREN
  } else if (typeof children === 'object') {
    if (shapeFlag & (ShapeFlags.ELEMENT | ShapeFlags.TELEPORT)) {
      // Normalize slot to plain children for plain element and Teleport
      const slot = children.default
      if (slot) {
        // _c marker is added by withCtx() indicating this is a compiled slot
        slot._c && (slot._d = false)
        normalizeChildren(vnode, slot())
        slot._c && (slot._d = true)
      }
      return
    } else {
      type = ShapeFlags.SLOTS_CHILDREN
      const slotFlag = children._
      if (!slotFlag && !(InternalObjectKey in children)) {
        // if slots are not normalized, attach context instance
        // (compiled / normalized slots already have context)
        children._ctx = currentRenderingInstance
      } else if (slotFlag === SlotFlags.FORWARDED && currentRenderingInstance) {
        // a child component receives forwarded slots from the parent.
        // its slot type is determined by its parent's slot type.
        if (
          (currentRenderingInstance.slots as RawSlots)._ === SlotFlags.STABLE
        ) {
          ;(children as RawSlots)._ = SlotFlags.STABLE
        } else {
          ;(children as RawSlots)._ = SlotFlags.DYNAMIC
          vnode.patchFlag |= PatchFlags.DYNAMIC_SLOTS
        }
      }
    }
  } else if (isFunction(children)) {
    children = { default: children, _ctx: currentRenderingInstance }
    type = ShapeFlags.SLOTS_CHILDREN
  } else {
    children = String(children)
    // force teleport children to array so it can be moved around
    if (shapeFlag & ShapeFlags.TELEPORT) {
      type = ShapeFlags.ARRAY_CHILDREN
      children = [createTextVNode(children as string)]
    } else {
      type = ShapeFlags.TEXT_CHILDREN
    }
  }
  vnode.children = children
  vnode.shapeFlag |= type
}
#+end_src
** createBaseVNode()
* h()

h 函数实际上是对 createVNode 函数的一次包装，主要是支持多种参数传递方式。
#+name: h
#+begin_src js -n -r
<<vue-pkgs>>
<<utils>>
<<createVNode>>

function h(type, propsOrChildren, children) {
  const l = arguments.length
  if (l === 2) {
    if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {
      // single vnode without props
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren])
      }
      // props without children
      return createVNode(type, propsOrChildren)
    } else {
      // omit props
      return createVNode(type, null, propsOrChildren)
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2)
    } else if (l === 3 && isVNode(children)) {
      children = [children]
    }
    return createVNode(type, propsOrChildren, children)
  }
}
#+end_src

* utils

#+name: utils
#+begin_src js -n -r
const InternalObjectKey = `__vInternal`

<<normalizeKey>>
<<normalizeRef>>
<<normalizeClass>>
<<normalizeStyle>>
#+end_src

** normalizeClass()
兼容各种类型的 class 使用：

1. ~<div class="name">~ => ~"name"~
2. ~<div :class="['name1', 'name2']>~ => ~"name1 name2"~
3. ~<div :class="{ name1: true, name2: true }">~ => ~"name1 name2"~


并且三种情况可以同时使用：

~<div class="name1" :class="['name2', 'name3']" :class="{ name4: true }">~ =>
~"name1 name2 name3 name4"~

#+name: normalizeClass
#+begin_src js -n -r
function normalizeClass(value) {
  let res = ''
  if (isString(value)) {
    res = value
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i])
      if (normalized) {
        res += normalized + ' '
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + ' '
      }
    }
  }
  return res.trim()
}
#+end_src

** normalizeStyle()

#+name: normalizeStyle
#+begin_src js -n -r
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {}
    for (let i = 0; i < value.length; i++) {
      const item = value[i]
      const normalized = isString(item)
        ? parseStringStyle(item)
        : (normalizeStyle(item))
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key]
        }
      }
    }
    return res
  } else if (isString(value)) {
    return value
  } else if (isObject(value)) {
    return value
  }
}

const listDelimiterRE = /;(?![^(]*\))/g
const propertyDelimiterRE = /:(.+)/

function parseStringStyle(cssText) {
  const ret = {}
  cssText.split(listDelimiterRE).forEach(item => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE)
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim())
    }
  })
  return ret
}

function stringifyStyle(styles) {
  let ret = ''
  if (!styles || isString(styles)) {
    return ret
  }
  for (const key in styles) {
    const value = styles[key]
    const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key)
    if (
      isString(value) ||
      (typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey))
    ) {
      // only render valid values
      ret += `${normalizedKey}:${value};`
    }
  }
  return ret
}
#+end_src

** normalizeKey()

#+name: normalizeKey
#+begin_src js -n -r
const normalizeKey = ({ key }) => key != null ? key : null
#+end_src

** normalizeRef()

#+begin_src js -n -r
const normalizeRef = ({ ref, ref_key, ref_for }) => {
  return (
    ref != null
      ? isString(ref) || isRef(ref) || isFunction(ref)
        ? { i: currentRenderingInstance, r: ref, k: ref_key, f: !!ref_for }
        : ref
      : null
  )
}
#+end_src
* watch

* COMMENT Local Variables :ARCHIVE:
# Local Variables:
# after-save-hook: gcl/org-html-export-to-html
# End:
